
# 项目背景
这是一个基于 Nextjs 博客 Web 应用程序，使用 Nextjs15.1.0 框架编写。
如果有关于nextjs的问题请查阅[Nextjs 官方文档](https://nextjs.org/docs)

# 项目目录结构
```
├── app
│   ├── admin
│   │   ├── page.tsx
│   ├── login
│   │   ├── page.tsx
├── api
│   ├── ...
├── components
│   ├── ui
│   │   ├── ...
├── libs
│   ├── utils.ts
│   ├── mongodb.ts
│   ├── posts.ts
├── models
│   ├── ...
├── providers
│   ├── ...
├── public
│   ├── ...
├── types
│   ├── ...
├── .gitignore
├── .env
├── .env.local
├── .env.d.ts
├── components.json
├── eslint.config.mjs
├── next-env.d.ts
├── next.config.ts
├── package.json
├── package-lock.json
├── README.md
├── tsconfig.json
├── tailwind.config.js
├── postcss.config.js
├── record.md
```
# 编码标准
- 使用函数式组件和 Hooks，避免类组件
- 变量声明优先使用 const，而不是 let
- 变量和函数名使用 camelCase 规范，组件名使用 - 连接
# 首选的库
- 使用 Next.js 进行导航
- 使用 tailwindcss 进行 CSS-in-JS 样式设计
- 使用 shadcn/ui 进行 UI 组件库
- 使用 mongodb 进行数据库操作
- 使用 axios 进行网络请求
- 使用 framer-motion 进行动画效果
- 使用 lucide-react 进行图标库
- 使用 markdown-it 进行 markdown 解析
- 使用 highlight.js 进行代码高亮
- 使用 isomorphic-dompurify 进行 HTML 净化
- 使用 jszip 进行文件压缩
- 使用 file-saver 进行文件保存
# 性能优化指南
- 使用 React.memo 优化组件渲染
- 使用 useCallback 优化函数引用
- 使用 useMemo 优化复杂计算
- 使用 useEffect 优化副作用处理
- 使用 useId 优化组件唯一 ID
#文档规范
- 使用 JSDoc 格式编写函数和组件的注释
- 每个主要目录必须包含 README.md 文件
- 同时提供英语和中文版本的 README.md 文件
# 错误处理
- 使用 try/catch 块处理异步操作
- 实现全局错误边界组件
# 布局
- 使用 shadcn/ui 进行布局
- 时刻注意黑暗模式和手机模式的兼容
# 请求
- 使用 axios的封装axiosInstance 进行网络请求
#其他
进行修改前，请先阅读record.md文件查看已经修改了什么内容；
修改后，请将修改记录在record.md文件中；
